// Generated by gencpp from file uav_msgs/DetectObjectResponse.msg
// DO NOT EDIT!


#ifndef UAV_MSGS_MESSAGE_DETECTOBJECTRESPONSE_H
#define UAV_MSGS_MESSAGE_DETECTOBJECTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_msgs
{
template <class ContainerAllocator>
struct DetectObjectResponse_
{
  typedef DetectObjectResponse_<ContainerAllocator> Type;

  DetectObjectResponse_()
    : scanELP(false)
    , scanDZ(false)
    , scanQRPos(false)
    , scanDistX(false)  {
    }
  DetectObjectResponse_(const ContainerAllocator& _alloc)
    : scanELP(false)
    , scanDZ(false)
    , scanQRPos(false)
    , scanDistX(false)  {
  (void)_alloc;
    }



   typedef uint8_t _scanELP_type;
  _scanELP_type scanELP;

   typedef uint8_t _scanDZ_type;
  _scanDZ_type scanDZ;

   typedef uint8_t _scanQRPos_type;
  _scanQRPos_type scanQRPos;

   typedef uint8_t _scanDistX_type;
  _scanDistX_type scanDistX;





  typedef boost::shared_ptr< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectObjectResponse_

typedef ::uav_msgs::DetectObjectResponse_<std::allocator<void> > DetectObjectResponse;

typedef boost::shared_ptr< ::uav_msgs::DetectObjectResponse > DetectObjectResponsePtr;
typedef boost::shared_ptr< ::uav_msgs::DetectObjectResponse const> DetectObjectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_msgs::DetectObjectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_msgs::DetectObjectResponse_<ContainerAllocator1> & lhs, const ::uav_msgs::DetectObjectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.scanELP == rhs.scanELP &&
    lhs.scanDZ == rhs.scanDZ &&
    lhs.scanQRPos == rhs.scanQRPos &&
    lhs.scanDistX == rhs.scanDistX;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_msgs::DetectObjectResponse_<ContainerAllocator1> & lhs, const ::uav_msgs::DetectObjectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "681083348eea32db0b025af17c671d2b";
  }

  static const char* value(const ::uav_msgs::DetectObjectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x681083348eea32dbULL;
  static const uint64_t static_value2 = 0x0b025af17c671d2bULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_msgs/DetectObjectResponse";
  }

  static const char* value(const ::uav_msgs::DetectObjectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool scanELP\n"
"bool scanDZ\n"
"bool scanQRPos\n"
"bool scanDistX\n"
"\n"
;
  }

  static const char* value(const ::uav_msgs::DetectObjectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scanELP);
      stream.next(m.scanDZ);
      stream.next(m.scanQRPos);
      stream.next(m.scanDistX);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectObjectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_msgs::DetectObjectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_msgs::DetectObjectResponse_<ContainerAllocator>& v)
  {
    s << indent << "scanELP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanELP);
    s << indent << "scanDZ: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanDZ);
    s << indent << "scanQRPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanQRPos);
    s << indent << "scanDistX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scanDistX);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MSGS_MESSAGE_DETECTOBJECTRESPONSE_H
