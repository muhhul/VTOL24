// Generated by gencpp from file uav_msgs/PrecLand.msg
// DO NOT EDIT!


#ifndef UAV_MSGS_MESSAGE_PRECLAND_H
#define UAV_MSGS_MESSAGE_PRECLAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_msgs
{
template <class ContainerAllocator>
struct PrecLand_
{
  typedef PrecLand_<ContainerAllocator> Type;

  PrecLand_()
    : size_x(0.0)
    , size_y(0.0)
    , angle_x(0.0)
    , angle_y(0.0)
    , distance(0.0)  {
    }
  PrecLand_(const ContainerAllocator& _alloc)
    : size_x(0.0)
    , size_y(0.0)
    , angle_x(0.0)
    , angle_y(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;

   typedef double _angle_x_type;
  _angle_x_type angle_x;

   typedef double _angle_y_type;
  _angle_y_type angle_y;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::uav_msgs::PrecLand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_msgs::PrecLand_<ContainerAllocator> const> ConstPtr;

}; // struct PrecLand_

typedef ::uav_msgs::PrecLand_<std::allocator<void> > PrecLand;

typedef boost::shared_ptr< ::uav_msgs::PrecLand > PrecLandPtr;
typedef boost::shared_ptr< ::uav_msgs::PrecLand const> PrecLandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_msgs::PrecLand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_msgs::PrecLand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_msgs::PrecLand_<ContainerAllocator1> & lhs, const ::uav_msgs::PrecLand_<ContainerAllocator2> & rhs)
{
  return lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.angle_x == rhs.angle_x &&
    lhs.angle_y == rhs.angle_y &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_msgs::PrecLand_<ContainerAllocator1> & lhs, const ::uav_msgs::PrecLand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::PrecLand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_msgs::PrecLand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::PrecLand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_msgs::PrecLand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::PrecLand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_msgs::PrecLand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_msgs::PrecLand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af195082e2bf6647fe0e1655a101af72";
  }

  static const char* value(const ::uav_msgs::PrecLand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf195082e2bf6647ULL;
  static const uint64_t static_value2 = 0xfe0e1655a101af72ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_msgs::PrecLand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_msgs/PrecLand";
  }

  static const char* value(const ::uav_msgs::PrecLand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_msgs::PrecLand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 size_x\n"
"float64 size_y\n"
"float64 angle_x\n"
"float64 angle_y\n"
"float64 distance\n"
;
  }

  static const char* value(const ::uav_msgs::PrecLand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_msgs::PrecLand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.angle_x);
      stream.next(m.angle_y);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrecLand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_msgs::PrecLand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_msgs::PrecLand_<ContainerAllocator>& v)
  {
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
    s << indent << "angle_x: ";
    Printer<double>::stream(s, indent + "  ", v.angle_x);
    s << indent << "angle_y: ";
    Printer<double>::stream(s, indent + "  ", v.angle_y);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_MSGS_MESSAGE_PRECLAND_H
